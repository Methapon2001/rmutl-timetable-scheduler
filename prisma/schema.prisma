generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String
  role     Role   @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token   Token[]
  group   Group[]
  section Section[]
}

enum Role {
  admin
  user
}

model Token {
  id    String   @id @default(uuid())
  token String   @db.TinyText
  iat   DateTime
  exp   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Building {
  id   String @id @default(uuid())
  code String
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room[]
}

enum RoomType {
  lecture
  lab
  both
}

model Room {
  id   String   @id @default(uuid())
  name String
  type RoomType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  section Section[]
}

model Subject {
  id      String @id @default(uuid())
  code    String
  name    String
  credit  Int
  lecture Int
  lab     Int
  exam    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section Section[]
}

model Instructor {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section Section[]
}

model Group {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy String
  creator   User   @relation(fields: [createdBy], references: [id])

  section Section[]
}

enum SectionType {
  lecture
  lab
}

model Section {
  id     String      @id @default(uuid())
  type   SectionType
  no     Int
  lab    Int?
  manual Boolean     @default(false)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  parentId String?
  parent   Section?  @relation("AssociatedSection", fields: [parentId], references: [id], onDelete: Cascade)
  child    Section[] @relation("AssociatedSection")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy String
  creator   User   @relation(fields: [createdBy], references: [id])

  instructor Instructor[]

  @@index([id, createdBy])
}
