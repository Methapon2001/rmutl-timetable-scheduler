generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(nanoid(16))
  username String @unique
  password String
  role     Role   @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token Token[]

  createdInstructor Instructor[] @relation("InstructorCreatedBy")
  updatedInstructor Instructor[] @relation("InstructorUpdatedBy")

  createdSubject Subject[] @relation("SubjectCreatedBy")
  updatedSubject Subject[] @relation("SubjectUpdatedBy")

  createdBuilding Building[] @relation("BuildingCreatedBy")
  updatedBuilding Building[] @relation("BuildingUpdatedBy")

  createdRoom Room[] @relation("RoomCreatedBy")
  updatedRoom Room[] @relation("RoomUpdatedBy")

  createdCourse Course[] @relation("CourseCreatedBy")
  updatedCourse Course[] @relation("CourseUpdatedBy")

  createdGroup Group[] @relation("GroupCreatedBy")
  updatedGroup Group[] @relation("GroupUpdatedBy")

  createdSection Section[] @relation("SectionCreatedBy")
  updatedSection Section[] @relation("SectionUpdatedBy")

  createdScheduler Scheduler[] @relation("SchedulerCreatedBy")
  updatedScheduler Scheduler[] @relation("SchedulerUpdatedBy")

  createdExam Exam[] @relation("ExamCreatedBy")
  updatedExam Exam[] @relation("ExamUpdatedBy")

  createdSchedulerExam SchedulerExam[] @relation("SchedulerExamCreatedBy")
  updatedSchedulerExam SchedulerExam[] @relation("SchedulerExamUpdatedBy")

  createdPlan Plan[] @relation("PlanCreatedBy")
  updatedPlan Plan[] @relation("PlanUpdatedBy")

  openedRequestSection OpenedRequestSection[]
}

enum Role {
  admin
  user
}

model Token {
  id    String @id @default(nanoid(16))
  token String @db.TinyText

  iat DateTime
  exp DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subject {
  id      String @id @default(nanoid(16))
  code    String
  name    String
  credit  Int
  lecture Int
  lab     Int
  learn   Int

  createdByUserId String
  createdBy       User     @relation("SubjectCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SubjectUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section        Section[]
  courseDetail   CourseDetail[]
  planDetail     PlanDetail[]
  RequestSection RequestSection[]
}

model Instructor {
  id String @id @default(nanoid(16))

  name String

  createdByUserId String
  createdBy       User     @relation("InstructorCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("InstructorUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section          Section[]
  exam             Exam[]
  requestedSection RequestSection[]
}

model Building {
  id   String @id @default(nanoid(16))
  code String
  name String

  createdByUserId String
  createdBy       User     @relation("BuildingCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("BuildingUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  room Room[]
}

model Room {
  id   String   @id @default(nanoid(16))
  name String
  type RoomType

  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  createdByUserId String
  createdBy       User     @relation("RoomCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("RoomUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section Section[]
  Exam    Exam[]
}

enum RoomType {
  lecture
  lab
  both
}

model Course {
  id   String @id @default(nanoid(16))
  name String

  createdByUserId String
  createdBy       User     @relation("CourseCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("CourseUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  detail CourseDetail[]
  group  Group[]
  plan   Plan[]
}

model CourseDetail {
  id   String      @id @default(nanoid(16))
  type SubjectType

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum SubjectType {
  compulsory
  elective
}

model Plan {
  id   String @id @default(nanoid(16))
  name String

  createdByUserId String
  createdBy       User     @relation("PlanCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("PlanUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  detail PlanDetail[]
  group  Group[]
}

model PlanDetail {
  id       String @id @default(nanoid(16))
  semester Int
  year     Int

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Group {
  id   String @id @default(nanoid(16))
  name String

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  info   Info   @relation(fields: [infoId], references: [id])
  infoId String

  createdByUserId String
  createdBy       User     @relation("GroupCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("GroupUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section Section[]
}

model Section {
  id       String      @id @default(nanoid(16))
  type     SectionType
  alt      String?
  no       Int
  lab      Int?
  manual   Boolean     @default(false)
  capacity Int

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  parentId String?
  parent   Section?  @relation("AssociatedSection", fields: [parentId], references: [id], onDelete: Cascade)
  child    Section[] @relation("AssociatedSection")

  info   Info   @relation(fields: [infoId], references: [id])
  infoId String

  createdByUserId String
  createdBy       User     @relation("SectionCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SectionUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  instructor Instructor[]
  scheduler  Scheduler[]
  exam       Exam[]
}

enum SectionType {
  lecture
  lab
}

model Scheduler {
  id      String  @id @default(nanoid(16))
  weekday Weekday
  start   Int
  end     Int
  publish Boolean @default(false)

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  info   Info   @relation(fields: [infoId], references: [id])
  infoId String

  createdByUserId String
  createdBy       User     @relation("SchedulerCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SchedulerUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt
}

enum Weekday {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

model Exam {
  id String @id @default(nanoid(16))

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  createdByUserId String
  createdBy       User     @relation("ExamCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("ExamUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section       Section[]
  instructor    Instructor[]
  schedulerExam SchedulerExam[]
}

model SchedulerExam {
  id      String  @id @default(nanoid(16))
  weekday Weekday
  start   Int
  end     Int
  publish Boolean @default(false)

  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  createdByUserId String
  createdBy       User     @relation("SchedulerExamCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SchedulerExamUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt
}

model OpenedRequestSection {
  id        String   @id @default(nanoid(16))
  key       String   @default(nanoid(16))
  createdAt DateTime @default(now())

  openedByUserId String @unique
  opener         User   @relation(fields: [openedByUserId], references: [id])

  requests RequestSection[]
}

model RequestSection {
  id        String   @id @default(nanoid(16))
  number    Int      @default(1)
  createdAt DateTime @default(now())

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  requestedByInstructorId String
  requester               Instructor @relation(fields: [requestedByInstructorId], references: [id])

  openedRequestSection   OpenedRequestSection @relation(fields: [openedRequestSectionId], references: [id], onDelete: Cascade)
  openedRequestSectionId String
}

model Info {
  id       String  @id @default(nanoid(16))
  year     Int
  semester Int
  current  Boolean

  group     Group[]
  section   Section[]
  scheduler Scheduler[]
}
