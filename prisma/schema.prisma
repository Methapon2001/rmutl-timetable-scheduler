generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(nanoid(16))
  username String @unique
  password String
  role     Role   @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token Token[]

  createdInstructor Instructor[] @relation("InstructorCreatedBy")
  updatedInstructor Instructor[] @relation("InstructorUpdatedBy")

  createdSubject Subject[] @relation("SubjectCreatedBy")
  updatedSubject Subject[] @relation("SubjectUpdatedBy")

  createdBuilding Building[] @relation("BuildingCreatedBy")
  updatedBuilding Building[] @relation("BuildingUpdatedBy")

  createdRoom Room[] @relation("RoomCreatedBy")
  updatedRoom Room[] @relation("RoomUpdatedBy")

  createdCourse Course[] @relation("CourseCreatedBy")
  updatedCourse Course[] @relation("CourseUpdatedBy")

  createdGroup Group[] @relation("GroupCreatedBy")
  updatedGroup Group[] @relation("GroupUpdatedBy")

  createdSection Section[] @relation("SectionCreatedBy")
  updatedSection Section[] @relation("SectionUpdatedBy")
}

enum Role {
  admin
  user
}

model Token {
  id    String @id @default(nanoid(16))
  token String @db.TinyText

  iat DateTime
  exp DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subject {
  id      String @id @default(nanoid(16))
  code    String
  name    String
  credit  Int
  lecture Int
  lab     Int
  exam    Int

  createdByUserId String
  createdBy       User     @relation("SubjectCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SubjectUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section      Section[]
  courseDetail CourseDetail[]
}

model Instructor {
  id   String @id @default(nanoid(16))
  name String

  createdByUserId String
  createdBy       User     @relation("InstructorCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("InstructorUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section Section[]
}

model Building {
  id   String @id @default(nanoid(16))
  code String
  name String

  createdByUserId String
  createdBy       User     @relation("BuildingCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("BuildingUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  room Room[]
}

model Room {
  id   String   @id @default(nanoid(16))
  name String
  type RoomType

  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  createdByUserId String
  createdBy       User     @relation("RoomCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("RoomUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section Section[]
}

enum RoomType {
  lecture
  lab
  both
}

model Course {
  id   String @id @default(nanoid(16))
  name String

  createdByUserId String
  createdBy       User     @relation("CourseCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("CourseUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  detail CourseDetail[]
  group  Group[]
}

model CourseDetail {
  id   String      @id @default(nanoid(16))
  type SubjectType

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum SubjectType {
  compulsory
  elective
}

model Group {
  id   String @id @default(nanoid(16))
  name String

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdByUserId String
  createdBy       User     @relation("GroupCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("GroupUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  section Section[]
}

model Section {
  id     String      @id @default(nanoid(16))
  type   SectionType
  no     Int
  lab    Int?
  manual Boolean     @default(false)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  parentId String?
  parent   Section?  @relation("AssociatedSection", fields: [parentId], references: [id], onDelete: Cascade)
  child    Section[] @relation("AssociatedSection")

  createdByUserId String
  createdBy       User     @relation("SectionCreatedBy", fields: [createdByUserId], references: [id])
  createdAt       DateTime @default(now())

  updatedByUserId String
  updatedBy       User     @relation("SectionUpdatedBy", fields: [updatedByUserId], references: [id])
  updatedAt       DateTime @updatedAt

  instructor Instructor[]
  scheduler  Scheduler[]
}

enum SectionType {
  lecture
  lab
}

model Scheduler {
  id        String   @id @default(nanoid(16))
  weekday   Weekday
  start     Int
  end       Int
  sectionId String?
  section   Section? @relation(fields: [sectionId], references: [id])
}

enum Weekday {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}
